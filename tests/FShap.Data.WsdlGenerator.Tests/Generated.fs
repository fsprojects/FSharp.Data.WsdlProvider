//------------------------------------------------------------------------------
//        This code was generated by myriad.
//        Changes to this file will be lost when the code is regenerated.
//------------------------------------------------------------------------------
namespace rec TestWsdl

open System
open System.Threading.Tasks

[<System.Xml.Serialization.XmlType(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A")>]
type TestResponse() =
    class
    end

[<System.ServiceModel.MessageContract(WrapperName = "GetChangeSetStatus",
                                      WrapperNamespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                      IsWrapped = true)>]
type GetChangeSetStatus(hotelId, changeSetId) =
    [<System.ServiceModel.MessageBodyMember(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                            Order = 0)>]
    member val HotelId: int = hotelId with get, set

    [<System.ServiceModel.MessageBodyMember(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                            Order = 1)>]
    member val ChangeSetId: string = changeSetId with get, set

type PlanningResponseMessageSuccess() =
    class
    end

[<System.Xml.Serialization.XmlType(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A")>]
type Error(comment, ``type``, message) =
    [<System.Xml.Serialization.XmlElement(Order = 0)>]
    member val Comment: string = comment with get, set

    [<System.Xml.Serialization.XmlAttribute("type")>]
    member val Type: string = ``type`` with get, set

    [<System.Xml.Serialization.XmlAttribute("message")>]
    member val Message: string = message with get, set

[<System.Xml.Serialization.XmlType(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A")>]
type ChangeStatus =
    | [<System.Xml.Serialization.XmlEnum("None")>] None = 0
    | [<System.Xml.Serialization.XmlEnum("Pending")>] Pending = 1
    | [<System.Xml.Serialization.XmlEnum("Success")>] Success = 2
    | [<System.Xml.Serialization.XmlEnum("Warning")>] Warning = 3
    | [<System.Xml.Serialization.XmlEnum("Failure")>] Failure = 4

[<System.Xml.Serialization.XmlType(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A")>]
type ChangeResponse(id, status) =
    [<System.Xml.Serialization.XmlAttribute("id")>]
    member val Id: string = id with get, set

    [<System.Xml.Serialization.XmlAttribute("status")>]
    member val Status: ChangeStatus = status with get, set

type MetadataApplication(name, version) =
    [<System.Xml.Serialization.XmlAttribute("name")>]
    member val Name: string = name with get, set

    [<System.Xml.Serialization.XmlAttribute("version")>]
    member val Version: string = version with get, set

[<System.Xml.Serialization.XmlType(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A")>]
type Metadata(application, groupId, hotelId, userId, sirionaUserId, bookingReference) =
    [<System.Xml.Serialization.XmlElement(Order = 0)>]
    member val Application: MetadataApplication = application with get, set

    [<System.Xml.Serialization.XmlAttribute("groupId")>]
    member val GroupId: uint = groupId with get, set

    [<System.Xml.Serialization.XmlAttribute("hotelId")>]
    member val HotelId: uint = hotelId with get, set

    [<System.Xml.Serialization.XmlAttribute("userId")>]
    member val UserId: uint = userId with get, set

    [<System.Xml.Serialization.XmlAttribute("sirionaUserId")>]
    member val SirionaUserId: string = sirionaUserId with get, set

    [<System.Xml.Serialization.XmlAttribute("bookingReference")>]
    member val BookingReference: string = bookingReference with get, set

[<System.Xml.Serialization.XmlType(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A")>]
type DayOfWeek =
    | [<System.Xml.Serialization.XmlEnum("Monday")>] Monday = 0
    | [<System.Xml.Serialization.XmlEnum("Tuesday")>] Tuesday = 1
    | [<System.Xml.Serialization.XmlEnum("Wednesday")>] Wednesday = 2
    | [<System.Xml.Serialization.XmlEnum("Thursday")>] Thursday = 3
    | [<System.Xml.Serialization.XmlEnum("Friday")>] Friday = 4
    | [<System.Xml.Serialization.XmlEnum("Saturday")>] Saturday = 5
    | [<System.Xml.Serialization.XmlEnum("Sunday")>] Sunday = 6

type ChangePropertyResultChangePeriodDayOfWeek(day) =
    [<System.Xml.Serialization.XmlAttribute("day")>]
    member val Day: DayOfWeek = day with get, set

type ChangePropertyResultChangePeriod(dayOfWeek, beginDate, endDate) =
    [<System.Xml.Serialization.XmlElement(Order = 0)>]
    member val DayOfWeek: ChangePropertyResultChangePeriodDayOfWeek[] = dayOfWeek with get, set

    [<System.Xml.Serialization.XmlAttribute("beginDate")>]
    member val BeginDate: string = beginDate with get, set

    [<System.Xml.Serialization.XmlAttribute("endDate")>]
    member val EndDate: string = endDate with get, set

type ChangePropertyResultChangeDependencies(property, entity) =
    [<System.Xml.Serialization.XmlElement(Order = 0)>]
    member val Property: ChangePropertyResult[] = property with get, set

    [<System.Xml.Serialization.XmlElement(Order = 1)>]
    member val Entity: ChangeEntityResult[] = entity with get, set

[<System.Xml.Serialization.XmlType(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A")>]
type ChangeAction =
    | [<System.Xml.Serialization.XmlEnum("Reset")>] Reset = 0
    | [<System.Xml.Serialization.XmlEnum("Set")>] Set = 1
    | [<System.Xml.Serialization.XmlEnum("Offset")>] Offset = 2

[<System.Xml.Serialization.XmlType(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A")>]
type ChangeConstraint =
    | [<System.Xml.Serialization.XmlEnum("None")>] None = 0
    | [<System.Xml.Serialization.XmlEnum("Overbooking")>] Overbooking = 1
    | [<System.Xml.Serialization.XmlEnum("LowRemainingRoomAvailability")>] LowRemainingRoomAvailability = 2
    | [<System.Xml.Serialization.XmlEnum("RoomMaximumPriceExceeded")>] RoomMaximumPriceExceeded = 3
    | [<System.Xml.Serialization.XmlEnum("RoomMinimumPriceExceeded")>] RoomMinimumPriceExceeded = 4
    | [<System.Xml.Serialization.XmlEnum("RoomMaximumCountExceeded")>] RoomMaximumCountExceeded = 5
    | [<System.Xml.Serialization.XmlEnum("UnsaleableRoom")>] UnsaleableRoom = 6
    | [<System.Xml.Serialization.XmlEnum("UnsaleableRoomExpected")>] UnsaleableRoomExpected = 7
    | [<System.Xml.Serialization.XmlEnum("ExtraMaximumPriceExpected")>] ExtraMaximumPriceExpected = 8
    | [<System.Xml.Serialization.XmlEnum("ExtraMinimumPriceExpected")>] ExtraMinimumPriceExpected = 9
    | [<System.Xml.Serialization.XmlEnum("StayLengthExceeded")>] StayLengthExceeded = 10
    | [<System.Xml.Serialization.XmlEnum("StayDatePassed")>] StayDatePassed = 11
    | [<System.Xml.Serialization.XmlEnum("ErrorOccurred")>] ErrorOccurred = 12

type ChangePropertyResultChange(period, dependencies, action, automatic, value, status, constraint, conflictingValue) =
    [<System.Xml.Serialization.XmlElement(Order = 0)>]
    member val Period: ChangePropertyResultChangePeriod = period with get, set

    [<System.Xml.Serialization.XmlElement(Order = 1)>]
    member val Dependencies: ChangePropertyResultChangeDependencies = dependencies with get, set

    [<System.Xml.Serialization.XmlAttribute("action")>]
    member val Action: ChangeAction = action with get, set

    [<System.Xml.Serialization.XmlAttribute("automatic")>]
    member val Automatic: bool = automatic with get, set

    [<System.Xml.Serialization.XmlAttribute("value")>]
    member val Value: string = value with get, set

    [<System.Xml.Serialization.XmlAttribute("status")>]
    member val Status: ChangeStatus = status with get, set

    [<System.Xml.Serialization.XmlAttribute("constraint")>]
    member val Constraint: ChangeConstraint = constraint with get, set

    [<System.Xml.Serialization.XmlAttribute("conflictingValue")>]
    member val ConflictingValue: string = conflictingValue with get, set

[<System.Xml.Serialization.XmlType(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A")>]
type PropertyName =
    | [<System.Xml.Serialization.XmlEnum("InitialAvailability")>] InitialAvailability = 0
    | [<System.Xml.Serialization.XmlEnum("RemainingAvailability")>] RemainingAvailability = 1
    | [<System.Xml.Serialization.XmlEnum("BookingCount")>] BookingCount = 2
    | [<System.Xml.Serialization.XmlEnum("Activation")>] Activation = 3
    | [<System.Xml.Serialization.XmlEnum("Price")>] Price = 4
    | [<System.Xml.Serialization.XmlEnum("OverridingPrice")>] OverridingPrice = 5
    | [<System.Xml.Serialization.XmlEnum("MinimumStay")>] MinimumStay = 6
    | [<System.Xml.Serialization.XmlEnum("OnArrivalMinimumStay")>] OnArrivalMinimumStay = 7
    | [<System.Xml.Serialization.XmlEnum("OnDepartureMinimumStay")>] OnDepartureMinimumStay = 8
    | [<System.Xml.Serialization.XmlEnum("MaximumStay")>] MaximumStay = 9
    | [<System.Xml.Serialization.XmlEnum("OnArrivalMaximumStay")>] OnArrivalMaximumStay = 10
    | [<System.Xml.Serialization.XmlEnum("OnDepartureMaximumStay")>] OnDepartureMaximumStay = 11
    | [<System.Xml.Serialization.XmlEnum("CancelConditions")>] CancelConditions = 12

[<System.Xml.Serialization.XmlType(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A")>]
type ChangePropertyResult(change, name) =
    [<System.Xml.Serialization.XmlElement(Order = 0)>]
    member val Change: ChangePropertyResultChange[] = change with get, set

    [<System.Xml.Serialization.XmlAttribute("name")>]
    member val Name: PropertyName = name with get, set

[<System.Xml.Serialization.XmlType(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A")>]
type EntityType =
    | [<System.Xml.Serialization.XmlEnum("Hotel")>] Hotel = 0
    | [<System.Xml.Serialization.XmlEnum("Article")>] Article = 1
    | [<System.Xml.Serialization.XmlEnum("Rate")>] Rate = 2
    | [<System.Xml.Serialization.XmlEnum("HotelChannelGroup")>] HotelChannelGroup = 3
    | [<System.Xml.Serialization.XmlEnum("ArticleChannelGroup")>] ArticleChannelGroup = 4
    | [<System.Xml.Serialization.XmlEnum("RateChannelGroup")>] RateChannelGroup = 5

[<System.Xml.Serialization.XmlType(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A")>]
type ChangeEntityResult(property, ``type``, hotelId, roomId, articleId, rateId, channelGroupId) =
    [<System.Xml.Serialization.XmlElement(Order = 0)>]
    member val Property: ChangePropertyResult[] = property with get, set

    [<System.Xml.Serialization.XmlAttribute("type")>]
    member val Type: EntityType = ``type`` with get, set

    [<System.Xml.Serialization.XmlAttribute("hotelId")>]
    member val HotelId: uint = hotelId with get, set

    [<System.Xml.Serialization.XmlAttribute("roomId")>]
    member val RoomId: uint = roomId with get, set

    [<System.Xml.Serialization.XmlAttribute("articleId")>]
    member val ArticleId: uint = articleId with get, set

    [<System.Xml.Serialization.XmlAttribute("rateId")>]
    member val RateId: uint = rateId with get, set

    [<System.Xml.Serialization.XmlAttribute("channelGroupId")>]
    member val ChannelGroupId: string = channelGroupId with get, set

type ChangeSetResponseChanges(entity) =
    [<System.Xml.Serialization.XmlElement(Order = 0)>]
    member val Entity: ChangeEntityResult[] = entity with get, set

[<System.Xml.Serialization.XmlType(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A")>]
type ChangeSetResponse(metadata, changes, id, requestDate, completionDate, status, ignoreFailures, legacyReload) =
    [<System.Xml.Serialization.XmlElement(Order = 0)>]
    member val Metadata: Metadata = metadata with get, set

    [<System.Xml.Serialization.XmlElement(Order = 1)>]
    member val Changes: ChangeSetResponseChanges = changes with get, set

    [<System.Xml.Serialization.XmlAttribute("id")>]
    member val Id: string = id with get, set

    [<System.Xml.Serialization.XmlAttribute("requestDate")>]
    member val RequestDate: System.DateTime = requestDate with get, set

    [<System.Xml.Serialization.XmlAttribute("completionDate")>]
    member val CompletionDate: System.DateTime = completionDate with get, set

    [<System.Xml.Serialization.XmlAttribute("status")>]
    member val Status: ChangeStatus = status with get, set

    [<System.Xml.Serialization.XmlAttribute("ignoreFailures")>]
    member val IgnoreFailures: bool = ignoreFailures with get, set

    [<System.Xml.Serialization.XmlAttribute("legacyReload")>]
    member val LegacyReload: bool = legacyReload with get, set

type ChangeSetSearchResponseChangeSet(metadata, id, requestDate, completionDate, status, ignoreFailures, legacyReload) =
    [<System.Xml.Serialization.XmlElement(Order = 0)>]
    member val Metadata: Metadata = metadata with get, set

    [<System.Xml.Serialization.XmlAttribute("id")>]
    member val Id: string = id with get, set

    [<System.Xml.Serialization.XmlAttribute("requestDate")>]
    member val RequestDate: System.DateTime = requestDate with get, set

    [<System.Xml.Serialization.XmlAttribute("completionDate")>]
    member val CompletionDate: System.DateTime = completionDate with get, set

    [<System.Xml.Serialization.XmlAttribute("status")>]
    member val Status: ChangeStatus = status with get, set

    [<System.Xml.Serialization.XmlAttribute("ignoreFailures")>]
    member val IgnoreFailures: bool = ignoreFailures with get, set

    [<System.Xml.Serialization.XmlAttribute("legacyReload")>]
    member val LegacyReload: bool = legacyReload with get, set

[<System.Xml.Serialization.XmlType(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A")>]
type ChangeSetSearchResponse(changeSet) =
    [<System.Xml.Serialization.XmlElement(Order = 0)>]
    member val ChangeSet: ChangeSetSearchResponseChangeSet = changeSet with get, set

[<System.Xml.Serialization.XmlType(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A")>]
type PlanningResponseMessage(success, warning, failure, item) =
    [<System.Xml.Serialization.XmlElement(Order = 0)>]
    member val Success: PlanningResponseMessageSuccess = success with get, set

    [<System.Xml.Serialization.XmlElement(Order = 1)>]
    member val Warning: Error = warning with get, set

    [<System.Xml.Serialization.XmlElement(Order = 2)>]
    member val Failure: Error = failure with get, set

    [<System.Xml.Serialization.XmlElement("changeResponse",
                                          Type = typeof<ChangeResponse>,
                                          Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A")>]
    [<System.Xml.Serialization.XmlElement("changeSetResponse",
                                          Type = typeof<ChangeSetResponse>,
                                          Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A")>]
    [<System.Xml.Serialization.XmlElement("changeSetSearchResponse",
                                          Type = typeof<ChangeSetSearchResponse>,
                                          Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A")>]
    member val Item: obj = item with get, set

[<System.ServiceModel.MessageContract(WrapperName = "GetChangeSetStatusResponse",
                                      WrapperNamespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                      IsWrapped = true)>]
type GetChangeSetStatusResponse(getChangeSetStatusResult) =
    [<System.ServiceModel.MessageBodyMember(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                            Order = 0)>]
    member val GetChangeSetStatusResult: PlanningResponseMessage = getChangeSetStatusResult with get, set

[<System.ServiceModel.MessageContract(WrapperName = "GetChangeSet",
                                      WrapperNamespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                      IsWrapped = true)>]
type GetChangeSet(hotelId, changeSetId) =
    [<System.ServiceModel.MessageBodyMember(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                            Order = 0)>]
    member val HotelId: int = hotelId with get, set

    [<System.ServiceModel.MessageBodyMember(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                            Order = 1)>]
    member val ChangeSetId: string = changeSetId with get, set

[<System.ServiceModel.MessageContract(WrapperName = "GetChangeSetResponse",
                                      WrapperNamespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                      IsWrapped = true)>]
type GetChangeSetResponse(getChangeSetResult) =
    [<System.ServiceModel.MessageBodyMember(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                            Order = 0)>]
    member val GetChangeSetResult: PlanningResponseMessage = getChangeSetResult with get, set

[<System.ServiceModel.MessageContract(WrapperName = "SearchChangeSets",
                                      WrapperNamespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                      IsWrapped = true)>]
type SearchChangeSets(startDate, endDate) =
    [<System.ServiceModel.MessageBodyMember(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                            Order = 0)>]
    member val StartDate: System.DateTime = startDate with get, set

    [<System.ServiceModel.MessageBodyMember(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                            Order = 1)>]
    member val EndDate: System.DateTime = endDate with get, set

[<System.ServiceModel.MessageContract(WrapperName = "SearchChangeSetsResponse",
                                      WrapperNamespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                      IsWrapped = true)>]
type SearchChangeSetsResponse(searchChangeSetsResult) =
    [<System.ServiceModel.MessageBodyMember(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                            Order = 0)>]
    member val SearchChangeSetsResult: PlanningResponseMessage = searchChangeSetsResult with get, set

[<System.ServiceModel.MessageContract(WrapperName = "SearchHotelChangeSets",
                                      WrapperNamespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                      IsWrapped = true)>]
type SearchHotelChangeSets(hotelId, startDate, endDate) =
    [<System.ServiceModel.MessageBodyMember(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                            Order = 0)>]
    member val HotelId: int = hotelId with get, set

    [<System.ServiceModel.MessageBodyMember(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                            Order = 1)>]
    member val StartDate: System.DateTime = startDate with get, set

    [<System.ServiceModel.MessageBodyMember(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                            Order = 2)>]
    member val EndDate: System.DateTime = endDate with get, set

[<System.ServiceModel.MessageContract(WrapperName = "SearchHotelChangeSetsResponse",
                                      WrapperNamespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                      IsWrapped = true)>]
type SearchHotelChangeSetsResponse(searchHotelChangeSetsResult) =
    [<System.ServiceModel.MessageBodyMember(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                            Order = 0)>]
    member val SearchHotelChangeSetsResult: PlanningResponseMessage = searchHotelChangeSetsResult with get, set

[<System.ServiceModel.MessageContract(WrapperName = "SearchPendingHotelChangeSets",
                                      WrapperNamespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                      IsWrapped = true)>]
type SearchPendingHotelChangeSets(hotelId, startDate, endDate) =
    [<System.ServiceModel.MessageBodyMember(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                            Order = 0)>]
    member val HotelId: int = hotelId with get, set

    [<System.ServiceModel.MessageBodyMember(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                            Order = 1)>]
    member val StartDate: System.DateTime = startDate with get, set

    [<System.ServiceModel.MessageBodyMember(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                            Order = 2)>]
    member val EndDate: System.DateTime = endDate with get, set

[<System.ServiceModel.MessageContract(WrapperName = "SearchPendingHotelChangeSetsResponse",
                                      WrapperNamespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                      IsWrapped = true)>]
type SearchPendingHotelChangeSetsResponse(searchPendingHotelChangeSetsResult) =
    [<System.ServiceModel.MessageBodyMember(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                            Order = 0)>]
    member val SearchPendingHotelChangeSetsResult: PlanningResponseMessage =
        searchPendingHotelChangeSetsResult with get, set

type DefaultBinding =
    static member SelectBinding(uri: string) =
        if (Uri uri).Scheme = Uri.UriSchemeHttps then
            System.ServiceModel.BasicHttpsBinding() :> System.ServiceModel.Channels.Binding
        else
            System.ServiceModel.BasicHttpBinding() :> System.ServiceModel.Channels.Binding

[<System.ServiceModel.ServiceContract(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                      ConfigurationName = "TestWsdl.ChangeSetService2012A")>]
[<Microsoft.FSharp.Core.Interface>]
type IChangeSetService2012ASoap =
    abstract Test: unit -> TestResponse
    abstract TestAsync: unit -> Task<TestResponse>
    abstract GetChangeSetStatus: GetChangeSetStatus -> GetChangeSetStatusResponse
    abstract GetChangeSetStatusAsync: GetChangeSetStatus -> Task<GetChangeSetStatusResponse>
    abstract GetChangeSet: GetChangeSet -> GetChangeSetResponse
    abstract GetChangeSetAsync: GetChangeSet -> Task<GetChangeSetResponse>
    abstract SearchChangeSets: SearchChangeSets -> SearchChangeSetsResponse
    abstract SearchChangeSetsAsync: SearchChangeSets -> Task<SearchChangeSetsResponse>
    abstract SearchHotelChangeSets: SearchHotelChangeSets -> SearchHotelChangeSetsResponse
    abstract SearchHotelChangeSetsAsync: SearchHotelChangeSets -> Task<SearchHotelChangeSetsResponse>
    abstract SearchPendingHotelChangeSets: SearchPendingHotelChangeSets -> SearchPendingHotelChangeSetsResponse

    abstract SearchPendingHotelChangeSetsAsync:
        SearchPendingHotelChangeSets -> Task<SearchPendingHotelChangeSetsResponse>

    abstract SearchBookingChangeSets: int -> PlanningResponseMessage
    abstract SearchBookingChangeSetsAsync: int -> Task<PlanningResponseMessage>
    abstract SearchBookingReferenceChangeSets: string -> PlanningResponseMessage
    abstract SearchBookingReferenceChangeSetsAsync: string -> Task<PlanningResponseMessage>

[<Microsoft.FSharp.Core.Interface>]
type ChangeSetService2012ASoap =
    abstract Test: unit -> TestResponse
    abstract TestAsync: unit -> Task<TestResponse>
    abstract GetChangeSetStatus: GetChangeSetStatus -> GetChangeSetStatusResponse
    abstract GetChangeSetStatusAsync: GetChangeSetStatus -> Task<GetChangeSetStatusResponse>
    abstract GetChangeSet: GetChangeSet -> GetChangeSetResponse
    abstract GetChangeSetAsync: GetChangeSet -> Task<GetChangeSetResponse>
    abstract SearchChangeSets: SearchChangeSets -> SearchChangeSetsResponse
    abstract SearchChangeSetsAsync: SearchChangeSets -> Task<SearchChangeSetsResponse>
    abstract SearchHotelChangeSets: SearchHotelChangeSets -> SearchHotelChangeSetsResponse
    abstract SearchHotelChangeSetsAsync: SearchHotelChangeSets -> Task<SearchHotelChangeSetsResponse>
    abstract SearchPendingHotelChangeSets: SearchPendingHotelChangeSets -> SearchPendingHotelChangeSetsResponse

    abstract SearchPendingHotelChangeSetsAsync:
        SearchPendingHotelChangeSets -> Task<SearchPendingHotelChangeSetsResponse>

    abstract SearchBookingChangeSets: int -> PlanningResponseMessage
    abstract SearchBookingChangeSetsAsync: int -> Task<PlanningResponseMessage>
    abstract SearchBookingReferenceChangeSets: string -> PlanningResponseMessage
    abstract SearchBookingReferenceChangeSetsAsync: string -> Task<PlanningResponseMessage>

type ChangeSetService2012A(binding: System.ServiceModel.Channels.Binding, address: System.ServiceModel.EndpointAddress) =
    inherit System.ServiceModel.ClientBase<IChangeSetService2012ASoap>(binding, address)

    new() =
        new ChangeSetService2012A(
            System.ServiceModel.BasicHttpBinding(),
            System.ServiceModel.EndpointAddress
                "http://planning.internal-services.production.siriona.com/planning/2012A/changesetservice.asmx"
        )

    new(address: string) =
        new ChangeSetService2012A(DefaultBinding.SelectBinding(address), System.ServiceModel.EndpointAddress address)

    static member Location =
        "http://planning.internal-services.production.siriona.com/planning/2012A/changesetservice.asmx"

    member this.Test() : TestResponse = base.Channel.Test()
    member this.TestAsync() : Task<TestResponse> = base.Channel.TestAsync()

    member this.GetChangeSetStatus(getChangeSetStatus: GetChangeSetStatus) : GetChangeSetStatusResponse =
        base.Channel.GetChangeSetStatus(getChangeSetStatus)

    member this.GetChangeSetStatusAsync(getChangeSetStatus: GetChangeSetStatus) : Task<GetChangeSetStatusResponse> =
        base.Channel.GetChangeSetStatusAsync(getChangeSetStatus)

    member this.GetChangeSet(getChangeSet: GetChangeSet) : GetChangeSetResponse =
        base.Channel.GetChangeSet(getChangeSet)

    member this.GetChangeSetAsync(getChangeSet: GetChangeSet) : Task<GetChangeSetResponse> =
        base.Channel.GetChangeSetAsync(getChangeSet)

    member this.SearchChangeSets(searchChangeSets: SearchChangeSets) : SearchChangeSetsResponse =
        base.Channel.SearchChangeSets(searchChangeSets)

    member this.SearchChangeSetsAsync(searchChangeSets: SearchChangeSets) : Task<SearchChangeSetsResponse> =
        base.Channel.SearchChangeSetsAsync(searchChangeSets)

    member this.SearchHotelChangeSets(searchHotelChangeSets: SearchHotelChangeSets) : SearchHotelChangeSetsResponse =
        base.Channel.SearchHotelChangeSets(searchHotelChangeSets)

    member this.SearchHotelChangeSetsAsync
        (searchHotelChangeSets: SearchHotelChangeSets)
        : Task<SearchHotelChangeSetsResponse> =
        base.Channel.SearchHotelChangeSetsAsync(searchHotelChangeSets)

    member this.SearchPendingHotelChangeSets
        (searchPendingHotelChangeSets: SearchPendingHotelChangeSets)
        : SearchPendingHotelChangeSetsResponse =
        base.Channel.SearchPendingHotelChangeSets(searchPendingHotelChangeSets)

    member this.SearchPendingHotelChangeSetsAsync
        (searchPendingHotelChangeSets: SearchPendingHotelChangeSets)
        : Task<SearchPendingHotelChangeSetsResponse> =
        base.Channel.SearchPendingHotelChangeSetsAsync(searchPendingHotelChangeSets)

    member this.SearchBookingChangeSets(bookingId: int) : PlanningResponseMessage =
        base.Channel.SearchBookingChangeSets(bookingId)

    member this.SearchBookingChangeSetsAsync(bookingId: int) : Task<PlanningResponseMessage> =
        base.Channel.SearchBookingChangeSetsAsync(bookingId)

    member this.SearchBookingReferenceChangeSets(bookingReference: string) : PlanningResponseMessage =
        base.Channel.SearchBookingReferenceChangeSets(bookingReference)

    member this.SearchBookingReferenceChangeSetsAsync(bookingReference: string) : Task<PlanningResponseMessage> =
        base.Channel.SearchBookingReferenceChangeSetsAsync(bookingReference)

