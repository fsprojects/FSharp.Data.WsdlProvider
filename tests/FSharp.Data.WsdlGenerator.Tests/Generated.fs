//------------------------------------------------------------------------------
//        This code was generated by myriad.
//        Changes to this file will be lost when the code is regenerated.
//------------------------------------------------------------------------------
namespace rec TestWsdl

open System
open System.Threading.Tasks

[<AllowNullLiteral>]
[<System.ServiceModel.MessageContract(WrapperName = "TestResponse",
                                      WrapperNamespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                      IsWrapped = true)>]
[<System.Serializable>]
type TestResponse() =
    class
    end

[<AllowNullLiteral>]
[<System.ServiceModel.MessageContract(WrapperName = "GetChangeSetStatus",
                                      WrapperNamespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                      IsWrapped = true)>]
[<System.Serializable>]
type GetChangeSetStatus() =
    [<DefaultValue>]
    val mutable private hotelIdField: int

    [<DefaultValue>]
    val mutable private changeSetIdField: string

    [<System.ServiceModel.MessageBodyMember(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                            Order = 0)>]
    member this.hotelId
        with get () = this.hotelIdField
        and set v = this.hotelIdField <- v

    [<System.ServiceModel.MessageBodyMember(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                            Order = 1)>]
    member this.changeSetId
        with get () = this.changeSetIdField
        and set v = this.changeSetIdField <- v

    new(hotelIdField, changeSetIdField) as this =
        GetChangeSetStatus()
        then
            this.hotelIdField <- hotelIdField
            this.changeSetIdField <- changeSetIdField

[<AllowNullLiteral>]
[<System.Xml.Serialization.XmlType(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A")>]
[<System.Serializable>]
type Error() =
    [<DefaultValue>]
    val mutable private commentField: string

    [<DefaultValue>]
    val mutable private typeField: string

    [<DefaultValue>]
    val mutable private messageField: string

    [<System.Xml.Serialization.XmlElement(Order = 0)>]
    member this.comment
        with get () = this.commentField
        and set v = this.commentField <- v

    [<System.Xml.Serialization.XmlAttribute("type")>]
    member this.``type``
        with get () = this.typeField
        and set v = this.typeField <- v

    [<System.Xml.Serialization.XmlAttribute("message")>]
    member this.message
        with get () = this.messageField
        and set v = this.messageField <- v

    new(commentField, typeField, messageField) as this =
        Error()
        then
            this.commentField <- commentField
            this.typeField <- typeField
            this.messageField <- messageField

[<System.Xml.Serialization.XmlType(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A")>]
type ChangeStatus =
    | [<System.Xml.Serialization.XmlEnum("None")>] None = 0
    | [<System.Xml.Serialization.XmlEnum("Pending")>] Pending = 1
    | [<System.Xml.Serialization.XmlEnum("Success")>] Success = 2
    | [<System.Xml.Serialization.XmlEnum("Warning")>] Warning = 3
    | [<System.Xml.Serialization.XmlEnum("Failure")>] Failure = 4

[<AllowNullLiteral>]
[<System.Xml.Serialization.XmlType(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A")>]
[<System.Serializable>]
type ChangeResponse() =
    [<DefaultValue>]
    val mutable private idField: string

    [<DefaultValue>]
    val mutable private statusField: ChangeStatus

    [<System.Xml.Serialization.XmlAttribute("id")>]
    member this.id
        with get () = this.idField
        and set v = this.idField <- v

    [<System.Xml.Serialization.XmlAttribute("status")>]
    member this.status
        with get () = this.statusField
        and set v = this.statusField <- v

    new(idField, statusField) as this =
        ChangeResponse()
        then
            this.idField <- idField
            this.statusField <- statusField

[<AllowNullLiteral>]
[<System.Serializable>]
type MetadataApplication() =
    [<DefaultValue>]
    val mutable private nameField: string

    [<DefaultValue>]
    val mutable private versionField: string

    [<System.Xml.Serialization.XmlAttribute("name")>]
    member this.name
        with get () = this.nameField
        and set v = this.nameField <- v

    [<System.Xml.Serialization.XmlAttribute("version")>]
    member this.version
        with get () = this.versionField
        and set v = this.versionField <- v

    new(nameField, versionField) as this =
        MetadataApplication()
        then
            this.nameField <- nameField
            this.versionField <- versionField

[<AllowNullLiteral>]
[<System.Xml.Serialization.XmlType(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A")>]
[<System.Serializable>]
type Metadata() =
    [<DefaultValue>]
    val mutable private applicationField: MetadataApplication

    [<DefaultValue>]
    val mutable private groupIdField: uint

    [<DefaultValue>]
    val mutable private hotelIdField: uint

    [<DefaultValue>]
    val mutable private userIdField: uint

    [<DefaultValue>]
    val mutable private userIdFieldSpecified: bool

    [<DefaultValue>]
    val mutable private sirionaUserIdField: string

    [<DefaultValue>]
    val mutable private sirionaUserIdFieldSpecified: bool

    [<DefaultValue>]
    val mutable private bookingReferenceField: string

    [<DefaultValue>]
    val mutable private bookingReferenceFieldSpecified: bool

    [<System.Xml.Serialization.XmlElement(Order = 0)>]
    member this.application
        with get () = this.applicationField
        and set v = this.applicationField <- v

    [<System.Xml.Serialization.XmlAttribute("groupId")>]
    member this.groupId
        with get () = this.groupIdField
        and set v = this.groupIdField <- v

    [<System.Xml.Serialization.XmlAttribute("hotelId")>]
    member this.hotelId
        with get () = this.hotelIdField
        and set v = this.hotelIdField <- v

    [<System.Xml.Serialization.XmlAttribute("userId")>]
    member this.userId
        with get () = this.userIdField
        and set v =
            this.userIdField <- v
            this.userIdFieldSpecified <- true

    [<System.Xml.Serialization.XmlIgnore>]
    member this.userIdSpecified = this.userIdFieldSpecified

    [<System.Xml.Serialization.XmlAttribute("sirionaUserId")>]
    member this.sirionaUserId
        with get () = this.sirionaUserIdField
        and set v =
            this.sirionaUserIdField <- v
            this.sirionaUserIdFieldSpecified <- true

    [<System.Xml.Serialization.XmlIgnore>]
    member this.sirionaUserIdSpecified = this.sirionaUserIdFieldSpecified

    [<System.Xml.Serialization.XmlAttribute("bookingReference")>]
    member this.bookingReference
        with get () = this.bookingReferenceField
        and set v =
            this.bookingReferenceField <- v
            this.bookingReferenceFieldSpecified <- true

    [<System.Xml.Serialization.XmlIgnore>]
    member this.bookingReferenceSpecified = this.bookingReferenceFieldSpecified

    new(applicationField, groupIdField, hotelIdField, userIdField, sirionaUserIdField, bookingReferenceField) as this =
        Metadata()
        then
            this.applicationField <- applicationField
            this.groupIdField <- groupIdField
            this.hotelIdField <- hotelIdField
            this.userIdField <- userIdField
            this.sirionaUserIdField <- sirionaUserIdField
            this.bookingReferenceField <- bookingReferenceField

[<System.Xml.Serialization.XmlType(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A")>]
type DayOfWeek =
    | [<System.Xml.Serialization.XmlEnum("Monday")>] Monday = 0
    | [<System.Xml.Serialization.XmlEnum("Tuesday")>] Tuesday = 1
    | [<System.Xml.Serialization.XmlEnum("Wednesday")>] Wednesday = 2
    | [<System.Xml.Serialization.XmlEnum("Thursday")>] Thursday = 3
    | [<System.Xml.Serialization.XmlEnum("Friday")>] Friday = 4
    | [<System.Xml.Serialization.XmlEnum("Saturday")>] Saturday = 5
    | [<System.Xml.Serialization.XmlEnum("Sunday")>] Sunday = 6

[<AllowNullLiteral>]
[<System.Serializable>]
type ChangePropertyResultChangePeriodDayOfWeek() =
    [<DefaultValue>]
    val mutable private dayField: DayOfWeek

    [<System.Xml.Serialization.XmlAttribute("day")>]
    member this.day
        with get () = this.dayField
        and set v = this.dayField <- v

    new(dayField) as this =
        ChangePropertyResultChangePeriodDayOfWeek()
        then this.dayField <- dayField

[<AllowNullLiteral>]
[<System.Serializable>]
type ChangePropertyResultChangePeriod() =
    [<DefaultValue>]
    val mutable private dayOfWeekField: ChangePropertyResultChangePeriodDayOfWeek[]

    [<DefaultValue>]
    val mutable private beginDateField: string

    [<DefaultValue>]
    val mutable private endDateField: string

    [<System.Xml.Serialization.XmlElement(Order = 0)>]
    member this.dayOfWeek
        with get () = this.dayOfWeekField
        and set v = this.dayOfWeekField <- v

    [<System.Xml.Serialization.XmlAttribute("beginDate")>]
    member this.beginDate
        with get () = this.beginDateField
        and set v = this.beginDateField <- v

    [<System.Xml.Serialization.XmlAttribute("endDate")>]
    member this.endDate
        with get () = this.endDateField
        and set v = this.endDateField <- v

    new(dayOfWeekField, beginDateField, endDateField) as this =
        ChangePropertyResultChangePeriod()
        then
            this.dayOfWeekField <- dayOfWeekField
            this.beginDateField <- beginDateField
            this.endDateField <- endDateField

[<AllowNullLiteral>]
[<System.Serializable>]
type ChangePropertyResultChangeDependencies() =
    [<DefaultValue>]
    val mutable private items: obj[]

    [<System.Xml.Serialization.XmlElement("property",
                                          Order = 0,
                                          Type = typeof<ChangePropertyResult>,
                                          Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A")>]
    [<System.Xml.Serialization.XmlElement("entity",
                                          Order = 0,
                                          Type = typeof<ChangeEntityResult>,
                                          Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A")>]
    member this.Items
        with get () = this.items
        and set v = this.items <- v

    new(items) as this =
        ChangePropertyResultChangeDependencies()
        then this.items <- items

[<System.Xml.Serialization.XmlType(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A")>]
type ChangeAction =
    | [<System.Xml.Serialization.XmlEnum("Reset")>] Reset = 0
    | [<System.Xml.Serialization.XmlEnum("Set")>] Set = 1
    | [<System.Xml.Serialization.XmlEnum("Offset")>] Offset = 2

[<System.Xml.Serialization.XmlType(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A")>]
type ChangeConstraint =
    | [<System.Xml.Serialization.XmlEnum("None")>] None = 0
    | [<System.Xml.Serialization.XmlEnum("Overbooking")>] Overbooking = 1
    | [<System.Xml.Serialization.XmlEnum("LowRemainingRoomAvailability")>] LowRemainingRoomAvailability = 2
    | [<System.Xml.Serialization.XmlEnum("RoomMaximumPriceExceeded")>] RoomMaximumPriceExceeded = 3
    | [<System.Xml.Serialization.XmlEnum("RoomMinimumPriceExceeded")>] RoomMinimumPriceExceeded = 4
    | [<System.Xml.Serialization.XmlEnum("RoomMaximumCountExceeded")>] RoomMaximumCountExceeded = 5
    | [<System.Xml.Serialization.XmlEnum("UnsaleableRoom")>] UnsaleableRoom = 6
    | [<System.Xml.Serialization.XmlEnum("UnsaleableRoomExpected")>] UnsaleableRoomExpected = 7
    | [<System.Xml.Serialization.XmlEnum("ExtraMaximumPriceExpected")>] ExtraMaximumPriceExpected = 8
    | [<System.Xml.Serialization.XmlEnum("ExtraMinimumPriceExpected")>] ExtraMinimumPriceExpected = 9
    | [<System.Xml.Serialization.XmlEnum("StayLengthExceeded")>] StayLengthExceeded = 10
    | [<System.Xml.Serialization.XmlEnum("StayDatePassed")>] StayDatePassed = 11
    | [<System.Xml.Serialization.XmlEnum("ErrorOccurred")>] ErrorOccurred = 12

[<AllowNullLiteral>]
[<System.Serializable>]
type ChangePropertyResultChange() =
    [<DefaultValue>]
    val mutable private periodField: ChangePropertyResultChangePeriod

    [<DefaultValue>]
    val mutable private dependenciesField: ChangePropertyResultChangeDependencies

    [<DefaultValue>]
    val mutable private actionField: ChangeAction

    [<DefaultValue>]
    val mutable private automaticField: bool

    [<DefaultValue>]
    val mutable private automaticFieldSpecified: bool

    [<DefaultValue>]
    val mutable private valueField: string

    [<DefaultValue>]
    val mutable private valueFieldSpecified: bool

    [<DefaultValue>]
    val mutable private statusField: ChangeStatus

    [<DefaultValue>]
    val mutable private constraintField: ChangeConstraint

    [<DefaultValue>]
    val mutable private constraintFieldSpecified: bool

    [<DefaultValue>]
    val mutable private conflictingValueField: string

    [<DefaultValue>]
    val mutable private conflictingValueFieldSpecified: bool

    [<System.Xml.Serialization.XmlElement(Order = 0)>]
    member this.period
        with get () = this.periodField
        and set v = this.periodField <- v

    [<System.Xml.Serialization.XmlElement(Order = 1)>]
    member this.dependencies
        with get () = this.dependenciesField
        and set v = this.dependenciesField <- v

    [<System.Xml.Serialization.XmlAttribute("action")>]
    member this.action
        with get () = this.actionField
        and set v = this.actionField <- v

    [<System.Xml.Serialization.XmlAttribute("automatic")>]
    member this.automatic
        with get () = this.automaticField
        and set v =
            this.automaticField <- v
            this.automaticFieldSpecified <- true

    [<System.Xml.Serialization.XmlIgnore>]
    member this.automaticSpecified = this.automaticFieldSpecified

    [<System.Xml.Serialization.XmlAttribute("value")>]
    member this.value
        with get () = this.valueField
        and set v =
            this.valueField <- v
            this.valueFieldSpecified <- true

    [<System.Xml.Serialization.XmlIgnore>]
    member this.valueSpecified = this.valueFieldSpecified

    [<System.Xml.Serialization.XmlAttribute("status")>]
    member this.status
        with get () = this.statusField
        and set v = this.statusField <- v

    [<System.Xml.Serialization.XmlAttribute("constraint")>]
    member this.``constraint``
        with get () = this.constraintField
        and set v =
            this.constraintField <- v
            this.constraintFieldSpecified <- true

    [<System.Xml.Serialization.XmlIgnore>]
    member this.constraintSpecified = this.constraintFieldSpecified

    [<System.Xml.Serialization.XmlAttribute("conflictingValue")>]
    member this.conflictingValue
        with get () = this.conflictingValueField
        and set v =
            this.conflictingValueField <- v
            this.conflictingValueFieldSpecified <- true

    [<System.Xml.Serialization.XmlIgnore>]
    member this.conflictingValueSpecified = this.conflictingValueFieldSpecified

    new(periodField,
        dependenciesField,
        actionField,
        automaticField,
        valueField,
        statusField,
        constraintField,
        conflictingValueField) as this =
        ChangePropertyResultChange()
        then
            this.periodField <- periodField
            this.dependenciesField <- dependenciesField
            this.actionField <- actionField
            this.automaticField <- automaticField
            this.valueField <- valueField
            this.statusField <- statusField
            this.constraintField <- constraintField
            this.conflictingValueField <- conflictingValueField

[<System.Xml.Serialization.XmlType(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A")>]
type PropertyName =
    | [<System.Xml.Serialization.XmlEnum("InitialAvailability")>] InitialAvailability = 0
    | [<System.Xml.Serialization.XmlEnum("RemainingAvailability")>] RemainingAvailability = 1
    | [<System.Xml.Serialization.XmlEnum("BookingCount")>] BookingCount = 2
    | [<System.Xml.Serialization.XmlEnum("Activation")>] Activation = 3
    | [<System.Xml.Serialization.XmlEnum("Price")>] Price = 4
    | [<System.Xml.Serialization.XmlEnum("OverridingPrice")>] OverridingPrice = 5
    | [<System.Xml.Serialization.XmlEnum("MinimumStay")>] MinimumStay = 6
    | [<System.Xml.Serialization.XmlEnum("OnArrivalMinimumStay")>] OnArrivalMinimumStay = 7
    | [<System.Xml.Serialization.XmlEnum("OnDepartureMinimumStay")>] OnDepartureMinimumStay = 8
    | [<System.Xml.Serialization.XmlEnum("MaximumStay")>] MaximumStay = 9
    | [<System.Xml.Serialization.XmlEnum("OnArrivalMaximumStay")>] OnArrivalMaximumStay = 10
    | [<System.Xml.Serialization.XmlEnum("OnDepartureMaximumStay")>] OnDepartureMaximumStay = 11
    | [<System.Xml.Serialization.XmlEnum("CancelConditions")>] CancelConditions = 12

[<AllowNullLiteral>]
[<System.Xml.Serialization.XmlType(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A")>]
[<System.Serializable>]
type ChangePropertyResult() =
    [<DefaultValue>]
    val mutable private changeField: ChangePropertyResultChange[]

    [<DefaultValue>]
    val mutable private nameField: PropertyName

    [<System.Xml.Serialization.XmlElement(Order = 0)>]
    member this.change
        with get () = this.changeField
        and set v = this.changeField <- v

    [<System.Xml.Serialization.XmlAttribute("name")>]
    member this.name
        with get () = this.nameField
        and set v = this.nameField <- v

    new(changeField, nameField) as this =
        ChangePropertyResult()
        then
            this.changeField <- changeField
            this.nameField <- nameField

[<System.Xml.Serialization.XmlType(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A")>]
type EntityType =
    | [<System.Xml.Serialization.XmlEnum("Hotel")>] Hotel = 0
    | [<System.Xml.Serialization.XmlEnum("Article")>] Article = 1
    | [<System.Xml.Serialization.XmlEnum("Rate")>] Rate = 2
    | [<System.Xml.Serialization.XmlEnum("HotelChannelGroup")>] HotelChannelGroup = 3
    | [<System.Xml.Serialization.XmlEnum("ArticleChannelGroup")>] ArticleChannelGroup = 4
    | [<System.Xml.Serialization.XmlEnum("RateChannelGroup")>] RateChannelGroup = 5

[<AllowNullLiteral>]
[<System.Xml.Serialization.XmlType(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A")>]
[<System.Serializable>]
type ChangeEntityResult() =
    [<DefaultValue>]
    val mutable private propertyField: ChangePropertyResult

    [<DefaultValue>]
    val mutable private typeField: EntityType

    [<DefaultValue>]
    val mutable private hotelIdField: uint

    [<DefaultValue>]
    val mutable private hotelIdFieldSpecified: bool

    [<DefaultValue>]
    val mutable private roomIdField: uint

    [<DefaultValue>]
    val mutable private roomIdFieldSpecified: bool

    [<DefaultValue>]
    val mutable private articleIdField: uint

    [<DefaultValue>]
    val mutable private articleIdFieldSpecified: bool

    [<DefaultValue>]
    val mutable private rateIdField: uint

    [<DefaultValue>]
    val mutable private rateIdFieldSpecified: bool

    [<DefaultValue>]
    val mutable private channelGroupIdField: string

    [<DefaultValue>]
    val mutable private channelGroupIdFieldSpecified: bool

    [<System.Xml.Serialization.XmlElement(Order = 0)>]
    member this.property
        with get () = this.propertyField
        and set v = this.propertyField <- v

    [<System.Xml.Serialization.XmlAttribute("type")>]
    member this.``type``
        with get () = this.typeField
        and set v = this.typeField <- v

    [<System.Xml.Serialization.XmlAttribute("hotelId")>]
    member this.hotelId
        with get () = this.hotelIdField
        and set v =
            this.hotelIdField <- v
            this.hotelIdFieldSpecified <- true

    [<System.Xml.Serialization.XmlIgnore>]
    member this.hotelIdSpecified = this.hotelIdFieldSpecified

    [<System.Xml.Serialization.XmlAttribute("roomId")>]
    member this.roomId
        with get () = this.roomIdField
        and set v =
            this.roomIdField <- v
            this.roomIdFieldSpecified <- true

    [<System.Xml.Serialization.XmlIgnore>]
    member this.roomIdSpecified = this.roomIdFieldSpecified

    [<System.Xml.Serialization.XmlAttribute("articleId")>]
    member this.articleId
        with get () = this.articleIdField
        and set v =
            this.articleIdField <- v
            this.articleIdFieldSpecified <- true

    [<System.Xml.Serialization.XmlIgnore>]
    member this.articleIdSpecified = this.articleIdFieldSpecified

    [<System.Xml.Serialization.XmlAttribute("rateId")>]
    member this.rateId
        with get () = this.rateIdField
        and set v =
            this.rateIdField <- v
            this.rateIdFieldSpecified <- true

    [<System.Xml.Serialization.XmlIgnore>]
    member this.rateIdSpecified = this.rateIdFieldSpecified

    [<System.Xml.Serialization.XmlAttribute("channelGroupId")>]
    member this.channelGroupId
        with get () = this.channelGroupIdField
        and set v =
            this.channelGroupIdField <- v
            this.channelGroupIdFieldSpecified <- true

    [<System.Xml.Serialization.XmlIgnore>]
    member this.channelGroupIdSpecified = this.channelGroupIdFieldSpecified

    new(propertyField, typeField, hotelIdField, roomIdField, articleIdField, rateIdField, channelGroupIdField) as this =
        ChangeEntityResult()
        then
            this.propertyField <- propertyField
            this.typeField <- typeField
            this.hotelIdField <- hotelIdField
            this.roomIdField <- roomIdField
            this.articleIdField <- articleIdField
            this.rateIdField <- rateIdField
            this.channelGroupIdField <- channelGroupIdField

[<AllowNullLiteral>]
[<System.Serializable>]
type ChangeSetResponseChanges() =
    [<DefaultValue>]
    val mutable private entityField: ChangeEntityResult

    [<System.Xml.Serialization.XmlElement(Order = 0)>]
    member this.entity
        with get () = this.entityField
        and set v = this.entityField <- v

    new(entityField) as this =
        ChangeSetResponseChanges()
        then this.entityField <- entityField

[<AllowNullLiteral>]
[<System.Xml.Serialization.XmlType(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A")>]
[<System.Serializable>]
type ChangeSetResponse() =
    [<DefaultValue>]
    val mutable private metadataField: Metadata

    [<DefaultValue>]
    val mutable private changesField: ChangeSetResponseChanges

    [<DefaultValue>]
    val mutable private idField: string

    [<DefaultValue>]
    val mutable private requestDateField: System.DateTime

    [<DefaultValue>]
    val mutable private completionDateField: System.DateTime

    [<DefaultValue>]
    val mutable private completionDateFieldSpecified: bool

    [<DefaultValue>]
    val mutable private statusField: ChangeStatus

    [<DefaultValue>]
    val mutable private ignoreFailuresField: bool

    [<DefaultValue>]
    val mutable private ignoreFailuresFieldSpecified: bool

    [<DefaultValue>]
    val mutable private legacyReloadField: bool

    [<DefaultValue>]
    val mutable private legacyReloadFieldSpecified: bool

    [<System.Xml.Serialization.XmlElement(Order = 0)>]
    member this.metadata
        with get () = this.metadataField
        and set v = this.metadataField <- v

    [<System.Xml.Serialization.XmlElement(Order = 1)>]
    member this.changes
        with get () = this.changesField
        and set v = this.changesField <- v

    [<System.Xml.Serialization.XmlAttribute("id")>]
    member this.id
        with get () = this.idField
        and set v = this.idField <- v

    [<System.Xml.Serialization.XmlAttribute("requestDate")>]
    member this.requestDate
        with get () = this.requestDateField
        and set v = this.requestDateField <- v

    [<System.Xml.Serialization.XmlAttribute("completionDate")>]
    member this.completionDate
        with get () = this.completionDateField
        and set v =
            this.completionDateField <- v
            this.completionDateFieldSpecified <- true

    [<System.Xml.Serialization.XmlIgnore>]
    member this.completionDateSpecified = this.completionDateFieldSpecified

    [<System.Xml.Serialization.XmlAttribute("status")>]
    member this.status
        with get () = this.statusField
        and set v = this.statusField <- v

    [<System.Xml.Serialization.XmlAttribute("ignoreFailures")>]
    member this.ignoreFailures
        with get () = this.ignoreFailuresField
        and set v =
            this.ignoreFailuresField <- v
            this.ignoreFailuresFieldSpecified <- true

    [<System.Xml.Serialization.XmlIgnore>]
    member this.ignoreFailuresSpecified = this.ignoreFailuresFieldSpecified

    [<System.Xml.Serialization.XmlAttribute("legacyReload")>]
    member this.legacyReload
        with get () = this.legacyReloadField
        and set v =
            this.legacyReloadField <- v
            this.legacyReloadFieldSpecified <- true

    [<System.Xml.Serialization.XmlIgnore>]
    member this.legacyReloadSpecified = this.legacyReloadFieldSpecified

    new(metadataField,
        changesField,
        idField,
        requestDateField,
        completionDateField,
        statusField,
        ignoreFailuresField,
        legacyReloadField) as this =
        ChangeSetResponse()
        then
            this.metadataField <- metadataField
            this.changesField <- changesField
            this.idField <- idField
            this.requestDateField <- requestDateField
            this.completionDateField <- completionDateField
            this.statusField <- statusField
            this.ignoreFailuresField <- ignoreFailuresField
            this.legacyReloadField <- legacyReloadField

[<AllowNullLiteral>]
[<System.Serializable>]
type ChangeSetSearchResponseChangeSet() =
    [<DefaultValue>]
    val mutable private metadataField: Metadata

    [<DefaultValue>]
    val mutable private idField: string

    [<DefaultValue>]
    val mutable private requestDateField: System.DateTime

    [<DefaultValue>]
    val mutable private completionDateField: System.DateTime

    [<DefaultValue>]
    val mutable private completionDateFieldSpecified: bool

    [<DefaultValue>]
    val mutable private statusField: ChangeStatus

    [<DefaultValue>]
    val mutable private ignoreFailuresField: bool

    [<DefaultValue>]
    val mutable private ignoreFailuresFieldSpecified: bool

    [<DefaultValue>]
    val mutable private legacyReloadField: bool

    [<DefaultValue>]
    val mutable private legacyReloadFieldSpecified: bool

    [<System.Xml.Serialization.XmlElement(Order = 0)>]
    member this.metadata
        with get () = this.metadataField
        and set v = this.metadataField <- v

    [<System.Xml.Serialization.XmlAttribute("id")>]
    member this.id
        with get () = this.idField
        and set v = this.idField <- v

    [<System.Xml.Serialization.XmlAttribute("requestDate")>]
    member this.requestDate
        with get () = this.requestDateField
        and set v = this.requestDateField <- v

    [<System.Xml.Serialization.XmlAttribute("completionDate")>]
    member this.completionDate
        with get () = this.completionDateField
        and set v =
            this.completionDateField <- v
            this.completionDateFieldSpecified <- true

    [<System.Xml.Serialization.XmlIgnore>]
    member this.completionDateSpecified = this.completionDateFieldSpecified

    [<System.Xml.Serialization.XmlAttribute("status")>]
    member this.status
        with get () = this.statusField
        and set v = this.statusField <- v

    [<System.Xml.Serialization.XmlAttribute("ignoreFailures")>]
    member this.ignoreFailures
        with get () = this.ignoreFailuresField
        and set v =
            this.ignoreFailuresField <- v
            this.ignoreFailuresFieldSpecified <- true

    [<System.Xml.Serialization.XmlIgnore>]
    member this.ignoreFailuresSpecified = this.ignoreFailuresFieldSpecified

    [<System.Xml.Serialization.XmlAttribute("legacyReload")>]
    member this.legacyReload
        with get () = this.legacyReloadField
        and set v =
            this.legacyReloadField <- v
            this.legacyReloadFieldSpecified <- true

    [<System.Xml.Serialization.XmlIgnore>]
    member this.legacyReloadSpecified = this.legacyReloadFieldSpecified

    new(metadataField,
        idField,
        requestDateField,
        completionDateField,
        statusField,
        ignoreFailuresField,
        legacyReloadField) as this =
        ChangeSetSearchResponseChangeSet()
        then
            this.metadataField <- metadataField
            this.idField <- idField
            this.requestDateField <- requestDateField
            this.completionDateField <- completionDateField
            this.statusField <- statusField
            this.ignoreFailuresField <- ignoreFailuresField
            this.legacyReloadField <- legacyReloadField

[<AllowNullLiteral>]
[<System.Xml.Serialization.XmlType(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A")>]
[<System.Serializable>]
type ChangeSetSearchResponse() =
    [<DefaultValue>]
    val mutable private changeSetField: ChangeSetSearchResponseChangeSet[]

    [<System.Xml.Serialization.XmlElement(Order = 0)>]
    member this.changeSet
        with get () = this.changeSetField
        and set v = this.changeSetField <- v

    new(changeSetField) as this =
        ChangeSetSearchResponse()
        then this.changeSetField <- changeSetField

[<AllowNullLiteral>]
[<System.Xml.Serialization.XmlType(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A")>]
[<System.Serializable>]
type PlanningResponseMessage() =
    [<DefaultValue>]
    val mutable private successField: obj

    [<DefaultValue>]
    val mutable private warningField: Error

    [<DefaultValue>]
    val mutable private failureField: Error

    [<DefaultValue>]
    val mutable private item: obj

    [<System.Xml.Serialization.XmlElement(Order = 0)>]
    member this.success
        with get () = this.successField
        and set v = this.successField <- v

    [<System.Xml.Serialization.XmlElement(Order = 1)>]
    member this.warning
        with get () = this.warningField
        and set v = this.warningField <- v

    [<System.Xml.Serialization.XmlElement(Order = 2)>]
    member this.failure
        with get () = this.failureField
        and set v = this.failureField <- v

    [<System.Xml.Serialization.XmlElement("changeResponse",
                                          Order = 3,
                                          Type = typeof<ChangeResponse>,
                                          Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A")>]
    [<System.Xml.Serialization.XmlElement("changeSetResponse",
                                          Order = 3,
                                          Type = typeof<ChangeSetResponse>,
                                          Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A")>]
    [<System.Xml.Serialization.XmlElement("changeSetSearchResponse",
                                          Order = 3,
                                          Type = typeof<ChangeSetSearchResponse>,
                                          Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A")>]
    member this.Item
        with get () = this.item
        and set v = this.item <- v

    new(successField, warningField, failureField, item) as this =
        PlanningResponseMessage()
        then
            this.successField <- successField
            this.warningField <- warningField
            this.failureField <- failureField
            this.item <- item

[<AllowNullLiteral>]
[<System.ServiceModel.MessageContract(WrapperName = "GetChangeSetStatusResponse",
                                      WrapperNamespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                      IsWrapped = true)>]
[<System.Serializable>]
type GetChangeSetStatusResponse() =
    [<DefaultValue>]
    val mutable private getChangeSetStatusResultField: PlanningResponseMessage

    [<System.ServiceModel.MessageBodyMember(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                            Order = 0)>]
    member this.GetChangeSetStatusResult
        with get () = this.getChangeSetStatusResultField
        and set v = this.getChangeSetStatusResultField <- v

    new(getChangeSetStatusResultField) as this =
        GetChangeSetStatusResponse()
        then this.getChangeSetStatusResultField <- getChangeSetStatusResultField

[<AllowNullLiteral>]
[<System.ServiceModel.MessageContract(WrapperName = "GetChangeSet",
                                      WrapperNamespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                      IsWrapped = true)>]
[<System.Serializable>]
type GetChangeSet() =
    [<DefaultValue>]
    val mutable private hotelIdField: int

    [<DefaultValue>]
    val mutable private changeSetIdField: string

    [<System.ServiceModel.MessageBodyMember(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                            Order = 0)>]
    member this.hotelId
        with get () = this.hotelIdField
        and set v = this.hotelIdField <- v

    [<System.ServiceModel.MessageBodyMember(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                            Order = 1)>]
    member this.changeSetId
        with get () = this.changeSetIdField
        and set v = this.changeSetIdField <- v

    new(hotelIdField, changeSetIdField) as this =
        GetChangeSet()
        then
            this.hotelIdField <- hotelIdField
            this.changeSetIdField <- changeSetIdField

[<AllowNullLiteral>]
[<System.ServiceModel.MessageContract(WrapperName = "GetChangeSetResponse",
                                      WrapperNamespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                      IsWrapped = true)>]
[<System.Serializable>]
type GetChangeSetResponse() =
    [<DefaultValue>]
    val mutable private getChangeSetResultField: PlanningResponseMessage

    [<System.ServiceModel.MessageBodyMember(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                            Order = 0)>]
    member this.GetChangeSetResult
        with get () = this.getChangeSetResultField
        and set v = this.getChangeSetResultField <- v

    new(getChangeSetResultField) as this =
        GetChangeSetResponse()
        then this.getChangeSetResultField <- getChangeSetResultField

[<AllowNullLiteral>]
[<System.ServiceModel.MessageContract(WrapperName = "SearchChangeSets",
                                      WrapperNamespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                      IsWrapped = true)>]
[<System.Serializable>]
type SearchChangeSets() =
    [<DefaultValue>]
    val mutable private startDateField: System.DateTime

    [<DefaultValue>]
    val mutable private endDateField: System.DateTime

    [<System.ServiceModel.MessageBodyMember(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                            Order = 0)>]
    member this.startDate
        with get () = this.startDateField
        and set v = this.startDateField <- v

    [<System.ServiceModel.MessageBodyMember(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                            Order = 1)>]
    member this.endDate
        with get () = this.endDateField
        and set v = this.endDateField <- v

    new(startDateField, endDateField) as this =
        SearchChangeSets()
        then
            this.startDateField <- startDateField
            this.endDateField <- endDateField

[<AllowNullLiteral>]
[<System.ServiceModel.MessageContract(WrapperName = "SearchChangeSetsResponse",
                                      WrapperNamespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                      IsWrapped = true)>]
[<System.Serializable>]
type SearchChangeSetsResponse() =
    [<DefaultValue>]
    val mutable private searchChangeSetsResultField: PlanningResponseMessage

    [<System.ServiceModel.MessageBodyMember(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                            Order = 0)>]
    member this.SearchChangeSetsResult
        with get () = this.searchChangeSetsResultField
        and set v = this.searchChangeSetsResultField <- v

    new(searchChangeSetsResultField) as this =
        SearchChangeSetsResponse()
        then this.searchChangeSetsResultField <- searchChangeSetsResultField

[<AllowNullLiteral>]
[<System.ServiceModel.MessageContract(WrapperName = "SearchHotelChangeSets",
                                      WrapperNamespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                      IsWrapped = true)>]
[<System.Serializable>]
type SearchHotelChangeSets() =
    [<DefaultValue>]
    val mutable private hotelIdField: int

    [<DefaultValue>]
    val mutable private startDateField: System.DateTime

    [<DefaultValue>]
    val mutable private endDateField: System.DateTime

    [<System.ServiceModel.MessageBodyMember(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                            Order = 0)>]
    member this.hotelId
        with get () = this.hotelIdField
        and set v = this.hotelIdField <- v

    [<System.ServiceModel.MessageBodyMember(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                            Order = 1)>]
    member this.startDate
        with get () = this.startDateField
        and set v = this.startDateField <- v

    [<System.ServiceModel.MessageBodyMember(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                            Order = 2)>]
    member this.endDate
        with get () = this.endDateField
        and set v = this.endDateField <- v

    new(hotelIdField, startDateField, endDateField) as this =
        SearchHotelChangeSets()
        then
            this.hotelIdField <- hotelIdField
            this.startDateField <- startDateField
            this.endDateField <- endDateField

[<AllowNullLiteral>]
[<System.ServiceModel.MessageContract(WrapperName = "SearchHotelChangeSetsResponse",
                                      WrapperNamespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                      IsWrapped = true)>]
[<System.Serializable>]
type SearchHotelChangeSetsResponse() =
    [<DefaultValue>]
    val mutable private searchHotelChangeSetsResultField: PlanningResponseMessage

    [<System.ServiceModel.MessageBodyMember(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                            Order = 0)>]
    member this.SearchHotelChangeSetsResult
        with get () = this.searchHotelChangeSetsResultField
        and set v = this.searchHotelChangeSetsResultField <- v

    new(searchHotelChangeSetsResultField) as this =
        SearchHotelChangeSetsResponse()
        then this.searchHotelChangeSetsResultField <- searchHotelChangeSetsResultField

[<AllowNullLiteral>]
[<System.ServiceModel.MessageContract(WrapperName = "SearchPendingHotelChangeSets",
                                      WrapperNamespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                      IsWrapped = true)>]
[<System.Serializable>]
type SearchPendingHotelChangeSets() =
    [<DefaultValue>]
    val mutable private hotelIdField: int

    [<DefaultValue>]
    val mutable private startDateField: System.DateTime

    [<DefaultValue>]
    val mutable private endDateField: System.DateTime

    [<System.ServiceModel.MessageBodyMember(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                            Order = 0)>]
    member this.hotelId
        with get () = this.hotelIdField
        and set v = this.hotelIdField <- v

    [<System.ServiceModel.MessageBodyMember(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                            Order = 1)>]
    member this.startDate
        with get () = this.startDateField
        and set v = this.startDateField <- v

    [<System.ServiceModel.MessageBodyMember(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                            Order = 2)>]
    member this.endDate
        with get () = this.endDateField
        and set v = this.endDateField <- v

    new(hotelIdField, startDateField, endDateField) as this =
        SearchPendingHotelChangeSets()
        then
            this.hotelIdField <- hotelIdField
            this.startDateField <- startDateField
            this.endDateField <- endDateField

[<AllowNullLiteral>]
[<System.ServiceModel.MessageContract(WrapperName = "SearchPendingHotelChangeSetsResponse",
                                      WrapperNamespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                      IsWrapped = true)>]
[<System.Serializable>]
type SearchPendingHotelChangeSetsResponse() =
    [<DefaultValue>]
    val mutable private searchPendingHotelChangeSetsResultField: PlanningResponseMessage

    [<System.ServiceModel.MessageBodyMember(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                            Order = 0)>]
    member this.SearchPendingHotelChangeSetsResult
        with get () = this.searchPendingHotelChangeSetsResultField
        and set v = this.searchPendingHotelChangeSetsResultField <- v

    new(searchPendingHotelChangeSetsResultField) as this =
        SearchPendingHotelChangeSetsResponse()
        then this.searchPendingHotelChangeSetsResultField <- searchPendingHotelChangeSetsResultField

type DefaultBinding =
    static member SelectBinding(uri: string) =
        if (Uri uri).Scheme = Uri.UriSchemeHttps then
            System.ServiceModel.BasicHttpsBinding() :> System.ServiceModel.Channels.Binding
        else
            System.ServiceModel.BasicHttpBinding() :> System.ServiceModel.Channels.Binding

[<System.ServiceModel.ServiceContract(Namespace = "http://ws.availpro.com/internal/schemas/planning/2012A",
                                      ConfigurationName = "TestWsdl.ChangeSetService2012A")>]
[<Interface>]
type IChangeSetService2012ASoap =
    [<System.ServiceModel.OperationContract(Action = "http://ws.availpro.com/internal/schemas/planning/2012A/Test",
                                            ReplyAction = "*")>]
    [<System.ServiceModel.XmlSerializerFormat(SupportFaults = true)>]
    abstract Test: unit -> TestResponse

    [<System.ServiceModel.OperationContract(Action = "http://ws.availpro.com/internal/schemas/planning/2012A/Test",
                                            ReplyAction = "*")>]
    [<System.ServiceModel.XmlSerializerFormat(SupportFaults = true)>]
    abstract TestAsync: unit -> Task<TestResponse>

    [<System.ServiceModel.OperationContract(Action = "http://ws.availpro.com/internal/schemas/planning/2012A/GetChangeSetStatus",
                                            ReplyAction = "*")>]
    [<System.ServiceModel.XmlSerializerFormat(SupportFaults = true)>]
    abstract GetChangeSetStatus: getChangeSetStatus: GetChangeSetStatus -> GetChangeSetStatusResponse

    [<System.ServiceModel.OperationContract(Action = "http://ws.availpro.com/internal/schemas/planning/2012A/GetChangeSetStatus",
                                            ReplyAction = "*")>]
    [<System.ServiceModel.XmlSerializerFormat(SupportFaults = true)>]
    abstract GetChangeSetStatusAsync: getChangeSetStatus: GetChangeSetStatus -> Task<GetChangeSetStatusResponse>

    [<System.ServiceModel.OperationContract(Action = "http://ws.availpro.com/internal/schemas/planning/2012A/GetChangeSet",
                                            ReplyAction = "*")>]
    [<System.ServiceModel.XmlSerializerFormat(SupportFaults = true)>]
    abstract GetChangeSet: getChangeSet: GetChangeSet -> GetChangeSetResponse

    [<System.ServiceModel.OperationContract(Action = "http://ws.availpro.com/internal/schemas/planning/2012A/GetChangeSet",
                                            ReplyAction = "*")>]
    [<System.ServiceModel.XmlSerializerFormat(SupportFaults = true)>]
    abstract GetChangeSetAsync: getChangeSet: GetChangeSet -> Task<GetChangeSetResponse>

    [<System.ServiceModel.OperationContract(Action = "http://ws.availpro.com/internal/schemas/planning/2012A/SearchChangeSets",
                                            ReplyAction = "*")>]
    [<System.ServiceModel.XmlSerializerFormat(SupportFaults = true)>]
    abstract SearchChangeSets: searchChangeSets: SearchChangeSets -> SearchChangeSetsResponse

    [<System.ServiceModel.OperationContract(Action = "http://ws.availpro.com/internal/schemas/planning/2012A/SearchChangeSets",
                                            ReplyAction = "*")>]
    [<System.ServiceModel.XmlSerializerFormat(SupportFaults = true)>]
    abstract SearchChangeSetsAsync: searchChangeSets: SearchChangeSets -> Task<SearchChangeSetsResponse>

    [<System.ServiceModel.OperationContract(Action = "http://ws.availpro.com/internal/schemas/planning/2012A/SearchHotelChangeSets",
                                            ReplyAction = "*")>]
    [<System.ServiceModel.XmlSerializerFormat(SupportFaults = true)>]
    abstract SearchHotelChangeSets: searchHotelChangeSets: SearchHotelChangeSets -> SearchHotelChangeSetsResponse

    [<System.ServiceModel.OperationContract(Action = "http://ws.availpro.com/internal/schemas/planning/2012A/SearchHotelChangeSets",
                                            ReplyAction = "*")>]
    [<System.ServiceModel.XmlSerializerFormat(SupportFaults = true)>]
    abstract SearchHotelChangeSetsAsync:
        searchHotelChangeSets: SearchHotelChangeSets -> Task<SearchHotelChangeSetsResponse>

    [<System.ServiceModel.OperationContract(Action = "http://ws.availpro.com/internal/schemas/planning/2012A/SearchPendingHotelChangeSets",
                                            ReplyAction = "*")>]
    [<System.ServiceModel.XmlSerializerFormat(SupportFaults = true)>]
    abstract SearchPendingHotelChangeSets:
        searchPendingHotelChangeSets: SearchPendingHotelChangeSets -> SearchPendingHotelChangeSetsResponse

    [<System.ServiceModel.OperationContract(Action = "http://ws.availpro.com/internal/schemas/planning/2012A/SearchPendingHotelChangeSets",
                                            ReplyAction = "*")>]
    [<System.ServiceModel.XmlSerializerFormat(SupportFaults = true)>]
    abstract SearchPendingHotelChangeSetsAsync:
        searchPendingHotelChangeSets: SearchPendingHotelChangeSets -> Task<SearchPendingHotelChangeSetsResponse>

    [<System.ServiceModel.OperationContract(Action = "http://ws.availpro.com/internal/schemas/planning/2012A/SearchBookingChangeSets",
                                            ReplyAction = "*")>]
    [<System.ServiceModel.XmlSerializerFormat(SupportFaults = true)>]
    abstract SearchBookingChangeSets: bookingId: int -> PlanningResponseMessage

    [<System.ServiceModel.OperationContract(Action = "http://ws.availpro.com/internal/schemas/planning/2012A/SearchBookingChangeSets",
                                            ReplyAction = "*")>]
    [<System.ServiceModel.XmlSerializerFormat(SupportFaults = true)>]
    abstract SearchBookingChangeSetsAsync: bookingId: int -> Task<PlanningResponseMessage>

    [<System.ServiceModel.OperationContract(Action = "http://ws.availpro.com/internal/schemas/planning/2012A/SearchBookingReferenceChangeSets",
                                            ReplyAction = "*")>]
    [<System.ServiceModel.XmlSerializerFormat(SupportFaults = true)>]
    abstract SearchBookingReferenceChangeSets: bookingReference: string -> PlanningResponseMessage

    [<System.ServiceModel.OperationContract(Action = "http://ws.availpro.com/internal/schemas/planning/2012A/SearchBookingReferenceChangeSets",
                                            ReplyAction = "*")>]
    [<System.ServiceModel.XmlSerializerFormat(SupportFaults = true)>]
    abstract SearchBookingReferenceChangeSetsAsync: bookingReference: string -> Task<PlanningResponseMessage>

[<Interface>]
type ChangeSetService2012ASoap =
    [<System.ServiceModel.OperationContract(Action = "http://ws.availpro.com/internal/schemas/planning/2012A/Test",
                                            ReplyAction = "*")>]
    [<System.ServiceModel.XmlSerializerFormat(SupportFaults = true)>]
    abstract Test: unit -> TestResponse

    [<System.ServiceModel.OperationContract(Action = "http://ws.availpro.com/internal/schemas/planning/2012A/Test",
                                            ReplyAction = "*")>]
    [<System.ServiceModel.XmlSerializerFormat(SupportFaults = true)>]
    abstract TestAsync: unit -> Task<TestResponse>

    [<System.ServiceModel.OperationContract(Action = "http://ws.availpro.com/internal/schemas/planning/2012A/GetChangeSetStatus",
                                            ReplyAction = "*")>]
    [<System.ServiceModel.XmlSerializerFormat(SupportFaults = true)>]
    abstract GetChangeSetStatus: getChangeSetStatus: GetChangeSetStatus -> GetChangeSetStatusResponse

    [<System.ServiceModel.OperationContract(Action = "http://ws.availpro.com/internal/schemas/planning/2012A/GetChangeSetStatus",
                                            ReplyAction = "*")>]
    [<System.ServiceModel.XmlSerializerFormat(SupportFaults = true)>]
    abstract GetChangeSetStatusAsync: getChangeSetStatus: GetChangeSetStatus -> Task<GetChangeSetStatusResponse>

    [<System.ServiceModel.OperationContract(Action = "http://ws.availpro.com/internal/schemas/planning/2012A/GetChangeSet",
                                            ReplyAction = "*")>]
    [<System.ServiceModel.XmlSerializerFormat(SupportFaults = true)>]
    abstract GetChangeSet: getChangeSet: GetChangeSet -> GetChangeSetResponse

    [<System.ServiceModel.OperationContract(Action = "http://ws.availpro.com/internal/schemas/planning/2012A/GetChangeSet",
                                            ReplyAction = "*")>]
    [<System.ServiceModel.XmlSerializerFormat(SupportFaults = true)>]
    abstract GetChangeSetAsync: getChangeSet: GetChangeSet -> Task<GetChangeSetResponse>

    [<System.ServiceModel.OperationContract(Action = "http://ws.availpro.com/internal/schemas/planning/2012A/SearchChangeSets",
                                            ReplyAction = "*")>]
    [<System.ServiceModel.XmlSerializerFormat(SupportFaults = true)>]
    abstract SearchChangeSets: searchChangeSets: SearchChangeSets -> SearchChangeSetsResponse

    [<System.ServiceModel.OperationContract(Action = "http://ws.availpro.com/internal/schemas/planning/2012A/SearchChangeSets",
                                            ReplyAction = "*")>]
    [<System.ServiceModel.XmlSerializerFormat(SupportFaults = true)>]
    abstract SearchChangeSetsAsync: searchChangeSets: SearchChangeSets -> Task<SearchChangeSetsResponse>

    [<System.ServiceModel.OperationContract(Action = "http://ws.availpro.com/internal/schemas/planning/2012A/SearchHotelChangeSets",
                                            ReplyAction = "*")>]
    [<System.ServiceModel.XmlSerializerFormat(SupportFaults = true)>]
    abstract SearchHotelChangeSets: searchHotelChangeSets: SearchHotelChangeSets -> SearchHotelChangeSetsResponse

    [<System.ServiceModel.OperationContract(Action = "http://ws.availpro.com/internal/schemas/planning/2012A/SearchHotelChangeSets",
                                            ReplyAction = "*")>]
    [<System.ServiceModel.XmlSerializerFormat(SupportFaults = true)>]
    abstract SearchHotelChangeSetsAsync:
        searchHotelChangeSets: SearchHotelChangeSets -> Task<SearchHotelChangeSetsResponse>

    [<System.ServiceModel.OperationContract(Action = "http://ws.availpro.com/internal/schemas/planning/2012A/SearchPendingHotelChangeSets",
                                            ReplyAction = "*")>]
    [<System.ServiceModel.XmlSerializerFormat(SupportFaults = true)>]
    abstract SearchPendingHotelChangeSets:
        searchPendingHotelChangeSets: SearchPendingHotelChangeSets -> SearchPendingHotelChangeSetsResponse

    [<System.ServiceModel.OperationContract(Action = "http://ws.availpro.com/internal/schemas/planning/2012A/SearchPendingHotelChangeSets",
                                            ReplyAction = "*")>]
    [<System.ServiceModel.XmlSerializerFormat(SupportFaults = true)>]
    abstract SearchPendingHotelChangeSetsAsync:
        searchPendingHotelChangeSets: SearchPendingHotelChangeSets -> Task<SearchPendingHotelChangeSetsResponse>

    [<System.ServiceModel.OperationContract(Action = "http://ws.availpro.com/internal/schemas/planning/2012A/SearchBookingChangeSets",
                                            ReplyAction = "*")>]
    [<System.ServiceModel.XmlSerializerFormat(SupportFaults = true)>]
    abstract SearchBookingChangeSets: bookingId: int -> PlanningResponseMessage

    [<System.ServiceModel.OperationContract(Action = "http://ws.availpro.com/internal/schemas/planning/2012A/SearchBookingChangeSets",
                                            ReplyAction = "*")>]
    [<System.ServiceModel.XmlSerializerFormat(SupportFaults = true)>]
    abstract SearchBookingChangeSetsAsync: bookingId: int -> Task<PlanningResponseMessage>

    [<System.ServiceModel.OperationContract(Action = "http://ws.availpro.com/internal/schemas/planning/2012A/SearchBookingReferenceChangeSets",
                                            ReplyAction = "*")>]
    [<System.ServiceModel.XmlSerializerFormat(SupportFaults = true)>]
    abstract SearchBookingReferenceChangeSets: bookingReference: string -> PlanningResponseMessage

    [<System.ServiceModel.OperationContract(Action = "http://ws.availpro.com/internal/schemas/planning/2012A/SearchBookingReferenceChangeSets",
                                            ReplyAction = "*")>]
    [<System.ServiceModel.XmlSerializerFormat(SupportFaults = true)>]
    abstract SearchBookingReferenceChangeSetsAsync: bookingReference: string -> Task<PlanningResponseMessage>

type ChangeSetService2012A(binding: System.ServiceModel.Channels.Binding, address: System.ServiceModel.EndpointAddress) =
    inherit System.ServiceModel.ClientBase<IChangeSetService2012ASoap>(binding, address)

    new() =
        new ChangeSetService2012A(
            System.ServiceModel.BasicHttpBinding(),
            System.ServiceModel.EndpointAddress
                "http://planning.internal-services.production.siriona.com/planning/2012A/changesetservice.asmx"
        )

    new(address: string) =
        new ChangeSetService2012A(DefaultBinding.SelectBinding(address), System.ServiceModel.EndpointAddress address)

    static member Location =
        "http://planning.internal-services.production.siriona.com/planning/2012A/changesetservice.asmx"

    member this.Test() : TestResponse = base.Channel.Test()
    member this.TestAsync() : Task<TestResponse> = base.Channel.TestAsync()

    member this.GetChangeSetStatus(getChangeSetStatus: GetChangeSetStatus) : GetChangeSetStatusResponse =
        base.Channel.GetChangeSetStatus(getChangeSetStatus)

    member this.GetChangeSetStatusAsync(getChangeSetStatus: GetChangeSetStatus) : Task<GetChangeSetStatusResponse> =
        base.Channel.GetChangeSetStatusAsync(getChangeSetStatus)

    member this.GetChangeSet(getChangeSet: GetChangeSet) : GetChangeSetResponse =
        base.Channel.GetChangeSet(getChangeSet)

    member this.GetChangeSetAsync(getChangeSet: GetChangeSet) : Task<GetChangeSetResponse> =
        base.Channel.GetChangeSetAsync(getChangeSet)

    member this.SearchChangeSets(searchChangeSets: SearchChangeSets) : SearchChangeSetsResponse =
        base.Channel.SearchChangeSets(searchChangeSets)

    member this.SearchChangeSetsAsync(searchChangeSets: SearchChangeSets) : Task<SearchChangeSetsResponse> =
        base.Channel.SearchChangeSetsAsync(searchChangeSets)

    member this.SearchHotelChangeSets(searchHotelChangeSets: SearchHotelChangeSets) : SearchHotelChangeSetsResponse =
        base.Channel.SearchHotelChangeSets(searchHotelChangeSets)

    member this.SearchHotelChangeSetsAsync
        (searchHotelChangeSets: SearchHotelChangeSets)
        : Task<SearchHotelChangeSetsResponse> =
        base.Channel.SearchHotelChangeSetsAsync(searchHotelChangeSets)

    member this.SearchPendingHotelChangeSets
        (searchPendingHotelChangeSets: SearchPendingHotelChangeSets)
        : SearchPendingHotelChangeSetsResponse =
        base.Channel.SearchPendingHotelChangeSets(searchPendingHotelChangeSets)

    member this.SearchPendingHotelChangeSetsAsync
        (searchPendingHotelChangeSets: SearchPendingHotelChangeSets)
        : Task<SearchPendingHotelChangeSetsResponse> =
        base.Channel.SearchPendingHotelChangeSetsAsync(searchPendingHotelChangeSets)

    member this.SearchBookingChangeSets(bookingId: int) : PlanningResponseMessage =
        base.Channel.SearchBookingChangeSets(bookingId)

    member this.SearchBookingChangeSetsAsync(bookingId: int) : Task<PlanningResponseMessage> =
        base.Channel.SearchBookingChangeSetsAsync(bookingId)

    member this.SearchBookingReferenceChangeSets(bookingReference: string) : PlanningResponseMessage =
        base.Channel.SearchBookingReferenceChangeSets(bookingReference)

    member this.SearchBookingReferenceChangeSetsAsync(bookingReference: string) : Task<PlanningResponseMessage> =
        base.Channel.SearchBookingReferenceChangeSetsAsync(bookingReference)

